Include a phase2.txt in your repo explaining in detail how to use the application,
the roles of users and how the users would go about using all the features of your website.
Using the main features of your project should be intuitive enough that any user with access to your URL
should be able to discover all its features (more on this file in the Grading section below).


You will be marked on the functionality of your application, its style and usability, the organization of your code,
how good your mock data represents a typical program run,
and how well the application creates the benefit to the user you have indicated in your proposal.

We will be specific on grading the main points of the Required Feature Specification laid out in the Project Proposal handout.
Although you may be focusing on the backend for this phase, your app's layout, views, and usability will all still be included in your evaluation.
If your TA had issues with these parts of your team's project in Phase 1, it is your responsibility to fix them for Phase 2.

As in Phase 1, there must be enough complexity in developing your app to justify working in a team.
Using frameworks/libraries to do most of your work for you and not writing your own features will result in a lower grade.


Also, provide an overview of the routes in your Express server, and what they are used for in your app,
what data they expect to be sent, and what they would return.
We will test your routes individually based on your instructions.


/*** Session handling **************************************/
sessionChecker
Express middleware to check for an active user on the sessions cookies.
Used to check if a user is login in. If a user is login in, will redirect to the
dashboard. Else will continue to the login process.

isSessionDead
Express middleware to check for an active user on the sessions cookies.
Used when a URl to a page is recevied that requires a user to be signed in to
use correctly. If no user is signed in, will redirect to the log in page.
Else will continue to the received get request.

/***  Web Page routes **************************************/
GET '/'
The default call on the URL. Redirects to the index page.

GET 'index'
The main page of the NoteWorthy side. Allows users to login or make a new user.
Send back the index.html file

GET 'newuser'
The page in which a user can create an account.
Send back the newuser.html file

GET 'dashboard'
The current log in user's profile page.
Resets the other sessions variables and send back the dashboard.html file

GET 'dashboard_viewable'
The dashboard of another user that the current user has clicked on.
Requires a user to be login in.
Send back the userviewable.html file


GET 'friendlist'
The current log in user's friendlist page.
Send back the user_friend_list.html file

GET 'viewable_friendlist'
Viewing the friend list of another NoteWorthy user that the user has clicked on.
Requires a user to be login in.
Send back the userviewable_friend_list.html file


GET 'collection'
Shows a user's collection that they just clicked on.
Send back the user_collection.html file

GET 'userviewable_collection'
Viewing the collection of another NoteWorthy user that the user has clicked on.
Requires a user to be login in.
Send back the userviewable_collection.html file

GET 'submitalbum'
Views to allow a user to submit an album.
Requires a user to be login in.
Send back the albumSubmissionPage.html file

GET 'album'
View the album page that a user has visited.
Requires a user to be login in.
Send back the album.html file

GET 'searchResult'
Views the search results of a user query.
Requires a user to be login in.
Send back the search_results.html file

GET 'submitalbum'
Views to allow a user to submit an album.
Requires a user to be login in.
Send back the albumSubmissionPage.html file

GET 'admin'
View the admin dashboard.
Requires that the login user is the admin, else goes to the index page.
Send back the admin-dashboard.html file


/*** User info routes **************************************/
//USER INFO ROUTES

POST 'users'
Adds a new user to the database.
Takes a profile picture link, password, display name and bio from the front end
login name is generated by the app.
Saved user to the database and returned this user object.

POST '/users/login'
A route to login and create a session
Takes a password and user name.
If not user is found, it redirects to the index. If the right user is found
and the password is correct, it redirect to the dashboard.

POST 'viewUser'
Sets the session's userviewable to that of the passed in user id.
Userviewable cannot be the same as the logged in user.
Returned nothing.

GET 'userViewable'
Returned the session's viewable user data. Only returned some of the data, as needed.

GET 'userinfo'
Return the logged in user's data.

GET 'Collectioninfo'
Finds and returned the collection of the logged in user that was just clicked.
Return the found collection.

GET 'Collectioninfo'
Finds and returned the collection of the logged in user that was just clicked.
Return the found collection.

POST 'viewCollection'
Save the index of the collection that just clicked.
Takes index value and returned nothing.

GET 'viewable_Collectioninfo'
Finds and returned the collection of the viewable user that was just clicked.
Return the found collection.

/*** album info routes **************************************/

GET 'albums'
Returns all the albums in the database.


POST 'viewAlbum'
Saved the ID of the album the user is about to view in the session's album
variable. Requires the user to be logged in.

GET 'albuminfo'
Send back the session's album  data.


/*** album review routes **************************************/

POST 'saveReviewUser'
Takes a review and save it to the logged in users's review array. The review body,
album info, date of review and rating are passed by the user.
Returned the new review.

POST 'saveReviewAlbum'
Takes a review and save it to the albim's review array. The review body,
user info, date of review and rating are passed by the user.
Also recalculates the album's average rating.
Returned the new review.

/*** favourite album routes **************************************/

GET 'albumFavourite'
Returned array of the login in user favourite album list.

POST 'favourAlbum '
Adds album to the user's favourite album array.
Takes the album's id, name and cover. Returned the updated user.

POST 'unfavourAlbum '
Removes album to the user's favourite album array.
Takes the album's id, name and cover. Returned the updated user.

/*** Listened album routes **************************************/

GET 'albumListened'
Returned if the login in user's albums that have listened to.

POST 'addListenedAlbum '
Adds array of the user's listened to array.
Takes the album's id, name and cover. Returned the updated user.

POST 'removeFromListened '
Removes album to the user's listened to album array.
Takes the album's id, name and cover. Returned the updated user.

/*** To listen album routes **************************************/

GET 'albumtoListen'
Returned array of the login in user's albums they plan to listen to.

POST 'toListenAlbum '
Adds album to the user's to listen to album array.
Takes the album's id, name and cover. Returned the updated user.

POST 'removeToList '
Removes album to the user's to listen to album array.
Takes the album's id, name and cover. Returned the updated user.


/*** Viewing, following and unfollowing routes **************************************/

GET 'userviewableinfo'
Returned the session's user and the viewable user info.


GET 'userFollowing'
Returned the session's users friend list.

POST 'followUser'
Adds a user to the current user friends list.
Passed in the _id, displayName of and the profile picture of the users.
Returns the updated user

POST 'unfollowUser'
remove a user to the current user friends list.
Passed in the _id, displayName of and the profile picture of the users.
Returns the updated user

/*** image handling routes **************************************/

POST 'image'
Use the cloudinary middleward and uploads a photo to the server.
Takes in a file object.
Returns a URL for the photo.

/*** Album submission routes **************************************/

POST 'pendingAlbumSubmissions'
Creates an pending albums submissions
Requires a user to be logged in.
Takes in the albums title, cover, artists, producer, length and details.
Returns the new submission.


GET 'pendingAlbumSubmissions'
Returns all the pending albums
Requires the admin to be logged in.
Returns the summaries pending albums submission info.

GET '/editSubmission&album=:albumID'
Returns the editor pages for the pending album.
Takes an album id.
Returns the admin-submission-editor.html

PATCH '/pendingAlbumSubmissions/:id'
Saved the changes to a pending album without approving it.
Requires the admin to be logged in

POST '/album/:id'
Takes a pending album submission and saved it as an album.
The log in user must be the admin.
Requires the pending album id.

GET 'submissionDetails'
Returns the data of a pending albums
The log in user must be the admin.
